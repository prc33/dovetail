#!/bin/bash

export LD_LIBRARY_PATH=~/boehm/lib/

database='results.db'
repeats=20

sqlfile=$(tempfile)

show_progress() {
  n=$(( $n + 1 ))
  p=$(( $n * 100 / $repeats ))
  echo -ne ${command_to_run}' ('${p}'%) \r'
}
 
run_tests() {
  n=0

  for (( i = 1; i <= $repeats ; i++ ))
  do
    (TIMEFORMAT="insert into timings (benchmark, version, threads, n, t_real, t_user) values ('${benchmark}', '${version}',${threads},${argument},%3R,%3U);"; time ${command_to_run} > /dev/null 2>&1) 2>>${sqlfile}
    show_progress
  done;

  echo -ne '\n'

#  echo -ne 'Callgrind (fast mode)...\n'
#  callgrindout=$(tempfile)
#  valgrind --tool=callgrind --dump-instr=yes --callgrind-out-file=${callgrindout} ${command_to_run} 1 ${argument}
#  total=$(callgrind_annotate --inclusive=yes ${callgrindout} | grep -m 1 TOTALS | awk 'BEGIN{OFMT="%.0f";VAL=0}{gsub(",", "", $1); VAL+=$1}END{print VAL}')
#  mem=$(callgrind_annotate --inclusive=yes ${callgrindout} | grep -m 1 GC_malloc | awk 'BEGIN{OFMT="%.0f";VAL=0}{gsub(",", "", $1); VAL+=$1}END{print VAL}')
#  sqlite3 ${database} "insert into mm (suite, variant, benchmark, threads, n, gc, total) values('${suite}', '${variant}', '${command_to_run}', 1, ${argument}, ${mem}, ${total});"

#  echo -ne 'Callgrind (slow mode)...\n'
#  callgrindout=$(tempfile)
#  valgrind --tool=callgrind --dump-instr=yes --callgrind-out-file=${callgrindout} ${command_to_run} ${max_threads} ${argument}
#  total=$(callgrind_annotate --inclusive=yes ${callgrindout} | grep -m 1 TOTALS | awk 'BEGIN{OFMT="%.0f";VAL=0}{gsub(",", "", $1); VAL+=$1}END{print VAL}')
#  mem=$(callgrind_annotate --inclusive=yes ${callgrindout} | grep -m 1 GC_malloc | awk 'BEGIN{OFMT="%.0f";VAL=0}{gsub(",", "", $1); VAL+=$1}END{print VAL}')
#  sqlite3 ${database} "insert into mm (suite, variant, benchmark, threads, n, gc, total) values('${suite}', '${variant}', '${command_to_run}', ${max_threads}, ${argument}, ${mem}, ${total});"
}
 
# Option parsing
while getopts f:c: OPT
do
    case "$OPT" in
        f)
            database=$OPTARG
            ;;
        c)
            repeats=$OPTARG
            ;;
        \?)
            echo 'No arguments supplied'
            exit 1
            ;;
    esac
done

# Generate Database
if [[ ! -f ${database} ]]; then
    sqlite3 ${database} "create table timings (id INTEGER PRIMARY KEY, benchmark TEXT, version TEXT, threads INTEGER, n INTEGER, t_real REAL, t_user REAL);"
#    sqlite3 ${database} "create table mm (id INTEGER PRIMARY KEY, suite TEXT, variant TEXT, benchmark TEXT, threads INTEGER, n INTEGER, gc INTEGER, total INTEGER);"
fi

shift `expr $OPTIND - 1`

benchmark=$1
version=$2
threads=$3
argument=$4
shift 4

command_to_run=$@

run_tests

cat ${sqlfile} | xargs -0 sqlite3 ${database}
