@print.int = extern (i32) -> i32

definition closed {
  channel @main(i32, (i32)) functional
  channel %result(i32)      cell
  channel %temp((i32))      mem

  transition @main(i32 %x, (i32) %k) {
    emit %temp((i32) %k)
    construct @fib(i32 %x, (i32) %result)
    finish
  }

  transition %result(i32 %x) %temp((i32) %k) {
    emit @print.int(i32 %x, (i32) %k)
    finish
  }
}

definition closed {
  channel @fib(i32, (i32))   functional
  channel %a(i32)            cell
  channel %b(i32)            cell
  channel %temp((i32))       mem

  channel %A_fib(i32, (i32)) functional
  channel %A_a(i32)          cell
  channel %A_b(i32)          cell
  channel %A_temp((i32))     mem

  channel %B_fib(i32,(i32))  functional
  channel %B_a(i32)          cell
  channel %B_b(i32)          cell
  channel %B_temp((i32))     mem

  transition @fib(i32 %x, (i32) %k) {
    %base = cmp ult i32 %x, 2
    br %base, label %base_case, label %recurse
  
  base_case:
    emit %k(i32 %x)
    finish

  recurse:
    emit %temp((i32) %k)

    %x1 = add i32 %x, -1
    emit %A_fib(i32 %x1, (i32) %a)

    %x2 = add i32 %x, -2
    emit %B_fib(i32 %x2, (i32) %b)

    finish
  }

  transition %a(i32 %x) %b(i32 %y) %temp((i32) %k) {
    %sum = add i32 %x, %y
    emit %k(i32 %sum)
    finish
  }

  transition %A_fib(i32 %x, (i32) %k) {
    %base = cmp ult i32 %x, 2
    br %base, label %base_case, label %recurse
  
  base_case:
    emit %a(i32 %x)
    finish

  recurse:
    emit %A_temp((i32) %k)

    %x1 = add i32 %x, -1
    construct @fib(i32 %x1, (i32) %A_a)

    %x2 = add i32 %x, -2
    construct @fib(i32 %x2, (i32) %A_b)

    finish
  }

  transition %A_a(i32 %x) %A_b(i32 %y) %A_temp((i32) %k) {
    %sum = add i32 %x, %y
    emit %k(i32 %sum)
    finish
  }

  transition @B_fib(i32 %x, (i32) %k) {
    %base = cmp ult i32 %x, 2
    br %base, label %base_case, label %recurse
  
  base_case:
    emit %b(i32 %x)
    finish

  recurse:
    emit %B_temp((i32) %k)

    %x1 = add i32 %x, -1
    construct @fib(i32 %x1, (i32) %B_a)

    %x2 = add i32 %x, -2
    construct @fib(i32 %x2, (i32) %B_b)

    finish
  }

  transition %B_a(i32 %x) %B_b(i32 %y) %B_temp((i32) %k) {
    %sum = add i32 %x, %y
    emit %k(i32 %sum)
    finish
  }
}
