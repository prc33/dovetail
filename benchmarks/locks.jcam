;%fun = type ((i8))

definition {
  channel @create_lock((((i8)),((i8))))   functional
  channel %acquire((i8))
  channel %release((i8))                  functional
  channel %available(i8)                  cell

  transition @create_lock((((i8)), ((i8))) %k) {
    emit %available(i8 0)
    emit %k(((i8)) %acquire, ((i8)) %release)
    finish
  }

  transition %acquire((i8) %k) %available(i8 %dummy) {
    emit %k(i8 0)
    finish
  }

  transition %release((i8) %k) {
    emit %available(i8 0)
    emit %k(i8 0)
    finish
  }
}

definition {
  channel @create_async_barrier(i32, (i32), ((i8))) functional
  channel %state(i32, (i32))                        mem
  channel %inc(i8)

  transition @create_async_barrier(i32 %count, (i32) %cont, ((i8)) %k) {
    emit %state(i32 %count, (i32) %cont)
    emit %k((i8) %inc)
    finish
  }

  transition %state(i32 %count, (i32) %cont) %inc(i8 %dummy) {
    %count_m1 = add i32 %count, -1
    %done = cmp eq i32 %count_m1, 0
    br %done, label %end, label %next
  
  next:
    emit %state(i32 %count_m1, (i32) %cont)
    finish

  end:
    emit %cont(i32 0)
    finish
  }
}

definition {
  channel @create_worker(((i8)), ((i8)), (i8))    functional
  channel %values(i32, ((i8)), ((i8)), (i8))      mem
  channel %step1(i8)                              cell
  channel %step2(i8)                              cell

  transition @create_worker(((i8)) %acquire, ((i8)) %release, (i8) %k) {
    emit %values(i32 1000000, ((i8)) %acquire, ((i8)) %release, (i8) %k)
    emit %step1(i8 0)
    finish
  }

  transition %values(i32 %count, ((i8)) %acquire, ((i8)) %release, (i8) %k) %step1(i8 %dummy) {
    %done = cmp eq i32 %count, 0
    br %done, label %end, label %next

  next:
    emit %values(i32 %count, ((i8)) %acquire, ((i8)) %release, (i8) %k)
    emit %acquire((i8) %step2)
    finish

  end:
    emit %k(i8 0)
    finish
  }

  transition %values(i32 %count, ((i8)) %acquire, ((i8)) %release, (i8) %k) %step2(i8 %dummy) {
    %count_m1 = add i32 %count, -1
    emit %values(i32 %count_m1, ((i8)) %acquire, ((i8)) %release, (i8) %k)
    emit %release((i8) %step1)
    finish
  }
}

definition {
  channel @main(i32, (i32))                       functional
  channel %barrier((i8))                          cell
  channel %lock(((i8)), ((i8)))                   cell
  channel %to_create(i32, ((i8)), ((i8)), (i8))   functional
  channel %tmp(i32)                               cell

  transition @main(i32 %n, (i32) %k) {
    emit %tmp(i32 %n)
    construct @create_async_barrier(i32 %n, (i32) %k, ((i8)) %barrier)
    construct @create_lock((((i8)), ((i8))) %lock)
    finish
  }

  transition %tmp(i32 %n) %barrier((i8) %sync) %lock(((i8)) %acquire, ((i8)) %release) {
    emit %to_create(i32 %n, ((i8)) %acquire, ((i8)) %release, (i8) %sync)
    finish
  }

  transition %to_create(i32 %n, ((i8)) %acquire, ((i8)) %release, (i8) %sync) {
    %done = cmp eq i32 %n, 0
    br %done, label %end, label %next

  next:
    %n_m1 = add i32 %n, -1
    construct @create_worker(((i8)) %acquire, ((i8)) %release, (i8) %sync)
    emit %to_create(i32 %n_m1, ((i8)) %acquire, ((i8)) %release, (i8) %sync)
    finish

  end:
    finish
  }
}

